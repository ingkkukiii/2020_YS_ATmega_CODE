
07_textlcd_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000028c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000aa3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f5  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f3  00000000  00000000  000013ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000249  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c9  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000161  00000000  00000000  00001b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 28 01 	call	0x250	; 0x250 <main>
  b6:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <portIn>:
#define cbi(reg,bit)	reg &= ~(BV(bit))  //특정(reg) bit를 0으로 만드는 것     
#define sbi(reg,bit)	reg |= (BV(bit))   //특정(reg) bit를 1으로 만드는 것

void portIn(void) //입력용 포트지정 함수
{
      DDRA = 0x00;	// PORTA를 입력으로
  be:	1a ba       	out	0x1a, r1	; 26
      DDRC = 0x0F;	// PORTG의 하위 4비트를 출력으로 //0xFF
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 bb       	out	0x14, r24	; 20
  c4:	08 95       	ret

000000c6 <portOut>:
}

void portOut(void) //출력용 포트지정 함수
{
      DDRA = 0xFF;	// PORTA를 출력으로
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
      DDRC = 0x0F;	// PORTG의 하위 4비트를 출력으로 //0xFF
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	08 95       	ret

000000d0 <writeCTRL>:
}

void writeCTRL(unsigned char ch) //LCD_IR에 명령어 쓰기 
{
	sbi(LCD_CTRL, LCD_EN); //LCD Enable 
  d0:	aa 9a       	sbi	0x15, 2	; 21
	cbi(LCD_CTRL, LCD_RW); //write
  d2:	a9 98       	cbi	0x15, 1	; 21
	cbi(LCD_CTRL, LCD_RS); //instruction
  d4:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	90 e1       	ldi	r25, 0x10	; 16
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <writeCTRL+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <writeCTRL+0xe>
	_delay_us(50);

	LCD_INST= ch; //PORTA -> instruction
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	8a 95       	dec	r24
  e4:	f1 f7       	brne	.-4      	; 0xe2 <writeCTRL+0x12>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <writeCTRL+0x18>
	_delay_us(50);

	cbi(LCD_CTRL, LCD_EN); //LCD Disable	 
  e8:	aa 98       	cbi	0x15, 2	; 21
  ea:	08 95       	ret

000000ec <writeChar>:
}

void writeChar(unsigned char ch) //LCD_DR에 데이터 출력
{
	sbi(LCD_CTRL, LCD_EN); //LCD Enable
  ec:	aa 9a       	sbi	0x15, 2	; 21
	cbi(LCD_CTRL, LCD_RW); //write
  ee:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CTRL, LCD_RS); //data
  f0:	a8 9a       	sbi	0x15, 0	; 21
  f2:	90 e1       	ldi	r25, 0x10	; 16
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <writeChar+0x8>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <writeChar+0xe>
	_delay_us(50);

	LCD_DATA = ch;  //PORTA -> data
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <writeChar+0x12>
 102:	00 c0       	rjmp	.+0      	; 0x104 <writeChar+0x18>
	_delay_us(50);

	cbi(LCD_CTRL, LCD_EN); //LCD Disable
 104:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	89 ef       	ldi	r24, 0xF9	; 249
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <writeChar+0x1e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <writeChar+0x24>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <writeSTR>:
	_delay_ms(1);
}

void writeSTR(unsigned char str[])  //문자열 출력함수 
{
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ec 01       	movw	r28, r24
	unsigned char i = 0;
 11c:	10 e0       	ldi	r17, 0x00	; 0
	
	while(str[i] != 0) //!= 같지 않다는 연산자 띄어쓰면 안돼 
 11e:	03 c0       	rjmp	.+6      	; 0x126 <writeSTR+0x12>
	{
		writeChar(str[i]);
 120:	0e 94 76 00 	call	0xec	; 0xec <writeChar>
		i++;
 124:	1f 5f       	subi	r17, 0xFF	; 255

void writeSTR(unsigned char str[])  //문자열 출력함수 
{
	unsigned char i = 0;
	
	while(str[i] != 0) //!= 같지 않다는 연산자 띄어쓰면 안돼 
 126:	fe 01       	movw	r30, r28
 128:	e1 0f       	add	r30, r17
 12a:	f1 1d       	adc	r31, r1
 12c:	80 81       	ld	r24, Z
 12e:	81 11       	cpse	r24, r1
 130:	f7 cf       	rjmp	.-18     	; 0x120 <writeSTR+0xc>
	{
		writeChar(str[i]);
		i++;
	}

}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	08 95       	ret

0000013a <readBF>:

unsigned char readBF()
{
	unsigned char rlt;

	sbi(LCD_CTRL, LCD_EN);  //LCD Enable
 13a:	aa 9a       	sbi	0x15, 2	; 21
	sbi(LCD_CTRL, LCD_RW);	//read
 13c:	a9 9a       	sbi	0x15, 1	; 21
	cbi(LCD_CTRL, LCD_RS);  //instruction
 13e:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	80 e1       	ldi	r24, 0x10	; 16
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <readBF+0x8>
 146:	00 c0       	rjmp	.+0      	; 0x148 <readBF+0xe>
	_delay_us(50);

	rlt = LCD_PIN;
 148:	89 b3       	in	r24, 0x19	; 25
 14a:	90 e1       	ldi	r25, 0x10	; 16
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <readBF+0x12>
 150:	00 c0       	rjmp	.+0      	; 0x152 <readBF+0x18>
	_delay_us(50);

	cbi(LCD_CTRL, LCD_EN);  //LCD Disable
 152:	aa 98       	cbi	0x15, 2	; 21

	return rlt; 
}
 154:	08 95       	ret

00000156 <waitBusy>:

void waitBusy() 
{
	portIn(); 
 156:	0e 94 5f 00 	call	0xbe	; 0xbe <portIn>
	while((readBF() & (1<<LCD_BUSY)) != 0); //readBF가 1이면 바쁜것을 확인 가능 , 0이면 반복문 빠져나옴 
 15a:	0e 94 9d 00 	call	0x13a	; 0x13a <readBF>
 15e:	87 fd       	sbrc	r24, 7
 160:	fc cf       	rjmp	.-8      	; 0x15a <waitBusy+0x4>
	portOut(); //LCD에 활용이 가능해져서 다시 PORTA를 출력용으로 지정하는 함수
 162:	0c 94 63 00 	jmp	0xc6	; 0xc6 <portOut>

00000166 <setPosition>:

void setPosition(unsigned char row, unsigned char col)  
{
	unsigned char addr; 
		
	if(row == 0)  //row = 문자행
 166:	88 23       	and	r24, r24
 168:	29 f0       	breq	.+10     	; 0x174 <setPosition+0xe>
		addr = col;
	else if(row == 1)  
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	29 f4       	brne	.+10     	; 0x178 <setPosition+0x12>
		addr = 0x40 + col; //col = 문자열
 16e:	86 2f       	mov	r24, r22
 170:	80 5c       	subi	r24, 0xC0	; 192
 172:	03 c0       	rjmp	.+6      	; 0x17a <setPosition+0x14>
void setPosition(unsigned char row, unsigned char col)  
{
	unsigned char addr; 
		
	if(row == 0)  //row = 문자행
		addr = col;
 174:	86 2f       	mov	r24, r22
 176:	01 c0       	rjmp	.+2      	; 0x17a <setPosition+0x14>
	else if(row == 1)  
		addr = 0x40 + col; //col = 문자열
	else 
		addr = 0;
 178:	80 e0       	ldi	r24, 0x00	; 0

	writeCTRL((1<<LCD_DDRAM) | addr);
 17a:	80 68       	ori	r24, 0x80	; 128
 17c:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	83 ef       	ldi	r24, 0xF3	; 243
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <setPosition+0x1e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <setPosition+0x24>
 18a:	00 00       	nop
 18c:	08 95       	ret

0000018e <clearLCD>:
//}

//모든 디스플레이 상태를 지우고 cursor를 Home 위치에 돌려놓는다.
void clearLCD() //LCD Display Claer 함수
{
	writeCTRL(1 << LCD_CLR);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 194:	83 ef       	ldi	r24, 0xF3	; 243
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <clearLCD+0xa>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <clearLCD+0x10>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <returnHome>:
}

//DDRAM의 내용은 변경하지 않고 cursor 만을 Home으로 위치시킨다.
void returnHome() //LCD Return Home 함수
{
	writeCTRL(1 << LCD_HOME);
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 1a8:	83 ef       	ldi	r24, 0xF3	; 243
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <returnHome+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <returnHome+0x10>
 1b2:	00 00       	nop
 1b4:	08 95       	ret

000001b6 <displayShiftLeft>:
}

//LCD 화면을 왼쪽으로 1번 이동
void displayShiftLeft(void)
{
	writeCTRL(1 << LCD_MOVE | 1 << LCD_MOVE_DISP);
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 1bc:	83 ef       	ldi	r24, 0xF3	; 243
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <displayShiftLeft+0xa>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <displayShiftLeft+0x10>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

000001ca <displayShiftRight>:
}

//LCD 화면을 오른쪽으로 1번 이동
void displayShiftRight(void)
{
	writeCTRL(1 << LCD_MOVE | 1 << LCD_MOVE_DISP | 1 << LCD_MOVE_RIGHT);
 1ca:	8c e1       	ldi	r24, 0x1C	; 28
 1cc:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 1d0:	83 ef       	ldi	r24, 0xF3	; 243
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <displayShiftRight+0xa>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <displayShiftRight+0x10>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <cursorShiftLeft>:
}

//커서를 왼쪽으로 1번 이동
void cursorShiftLeft()   
{
	writeCTRL((1<<LCD_MOVE) | (0<<LCD_MOVE_DISP) | (0<<LCD_MOVE_RIGHT)); 
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 1e4:	83 ef       	ldi	r24, 0xF3	; 243
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <cursorShiftLeft+0xa>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <cursorShiftLeft+0x10>
 1ee:	00 00       	nop
 1f0:	08 95       	ret

000001f2 <cursorShiftRight>:
}

//커서를 오른쪽으로 1번 이동
void cursorShiftRight()  
{
	writeCTRL((1<<LCD_MOVE) | (0<<LCD_MOVE_DISP) | (1<<LCD_MOVE_RIGHT));
 1f2:	84 e1       	ldi	r24, 0x14	; 20
 1f4:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 1f8:	83 ef       	ldi	r24, 0xF3	; 243
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <cursorShiftRight+0xa>
 200:	00 c0       	rjmp	.+0      	; 0x202 <cursorShiftRight+0x10>
 202:	00 00       	nop
 204:	08 95       	ret

00000206 <LCDInit>:
	_delay_ms(2);
}

void LCDInit()  //LCD 초기화
{
	writeCTRL((1<<LCD_FUNCTION) | (1<<LCD_FUNCTION_8BIT) | (1<<LCD_FUNCTION_2LINES) | (0<<LCD_FUNCTION_10DOTS));
 206:	88 e3       	ldi	r24, 0x38	; 56
 208:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 20c:	83 ef       	ldi	r24, 0xF3	; 243
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCDInit+0xa>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCDInit+0x10>
 216:	00 00       	nop
	_delay_ms(2);
	writeCTRL((1<<LCD_ON_CTRL) | (1<<LCD_ON_DISPLAY) | (1<<LCD_ON_CURSOR) | (0<<LCD_ON_BLINK));
 218:	8e e0       	ldi	r24, 0x0E	; 14
 21a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 21e:	83 ef       	ldi	r24, 0xF3	; 243
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDInit+0x1c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCDInit+0x22>
 228:	00 00       	nop
	_delay_ms(2);
	writeCTRL(1<<LCD_CLR);
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 230:	83 ef       	ldi	r24, 0xF3	; 243
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCDInit+0x2e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCDInit+0x34>
 23a:	00 00       	nop
	_delay_ms(2);
	writeCTRL((1<<LCD_ENTRY_MODE) | (1<<LCD_ENTRY_INC) | (0<<LCD_ENTRY_SHIFT));
 23c:	86 e0       	ldi	r24, 0x06	; 6
 23e:	0e 94 68 00 	call	0xd0	; 0xd0 <writeCTRL>
 242:	83 ef       	ldi	r24, 0xF3	; 243
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCDInit+0x40>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCDInit+0x46>
 24c:	00 00       	nop
 24e:	08 95       	ret

00000250 <main>:
#include "07_textlcd.h"

int main(void) 
{
	portOut();		
 250:	0e 94 63 00 	call	0xc6	; 0xc6 <portOut>
    LCDInit();
 254:	0e 94 03 01 	call	0x206	; 0x206 <LCDInit>
	waitBusy();
 258:	0e 94 ab 00 	call	0x156	; 0x156 <waitBusy>

	setPosition(0,0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 b3 00 	call	0x166	; 0x166 <setPosition>
	waitBusy();
 264:	0e 94 ab 00 	call	0x156	; 0x156 <waitBusy>
	//writeChar('S');
	//writeChar('U');
	//writeChar(' ');

	//40자 
	writeSTR("Yeonsung University Digital Electronic!!Depertment Hwang In Kuk");
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 8a 00 	call	0x114	; 0x114 <writeSTR>
	//setPosition(1,0);
	//writeSTR("Digital");

	while(1)
	{
		displayShiftLeft();
 270:	0e 94 db 00 	call	0x1b6	; 0x1b6 <displayShiftLeft>
 274:	2f e3       	ldi	r18, 0x3F	; 63
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x2a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x34>
 284:	00 00       	nop
 286:	f4 cf       	rjmp	.-24     	; 0x270 <main+0x20>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
