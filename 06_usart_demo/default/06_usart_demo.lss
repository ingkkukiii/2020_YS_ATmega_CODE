
06_usart_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a33  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000310  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001cb  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ac  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015e  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e1       	ldi	r30, 0x16	; 22
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 34       	cpi	r26, 0x44	; 68
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 90 00 	call	0x120	; 0x120 <main>
  b6:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <usart_init>:
*/

// usart 초기화
void usart_init() 
{
	UBRR0H = (unsigned char)BAUD_RATE_H;
  be:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char)BAUD_RATE_L;
  c2:	83 e3       	ldi	r24, 0x33	; 51
  c4:	89 b9       	out	0x09, r24	; 9

	UCSR0B = (1<<TXEN) | (1<<RXEN) | (0<<UCSZ2); // 19200bps, no parity, 1-stop bit, 8-data bits
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	80 93 95 00 	sts	0x0095, r24
  d0:	08 95       	ret

000000d2 <usart_send_byte>:
}

// usart 문자 1byte 송신
void usart_send_byte(unsigned char byte)
{
	while (!(UCSR0A & (1<<UDRE0)));
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <usart_send_byte>
	UDR0 = byte;
  d6:	8c b9       	out	0x0c, r24	; 12
  d8:	08 95       	ret

000000da <usart_send_string>:
}

// usart usart_send_byte함수를 반복 처리하여 문자열 송신
void usart_send_string(unsigned char *str, unsigned char len)
{
  da:	ef 92       	push	r14
  dc:	ff 92       	push	r15
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	int i;

	for(i = 0; i < len; i++)
  e8:	8c 01       	movw	r16, r24
  ea:	e6 2e       	mov	r14, r22
  ec:	f1 2c       	mov	r15, r1
  ee:	07 c0       	rjmp	.+14     	; 0xfe <usart_send_string+0x24>
	{
		if(!(*(str + i)))
  f0:	f8 01       	movw	r30, r16
  f2:	81 91       	ld	r24, Z+
  f4:	8f 01       	movw	r16, r30
  f6:	88 23       	and	r24, r24
  f8:	41 f0       	breq	.+16     	; 0x10a <usart_send_string+0x30>
		{
			break;
		}
		usart_send_byte(*(str + i));
  fa:	0e 94 69 00 	call	0xd2	; 0xd2 <usart_send_byte>
	while (!(UCSR0A & (1<<UDRE0)));
	UDR0 = byte;
}

// usart usart_send_byte함수를 반복 처리하여 문자열 송신
void usart_send_string(unsigned char *str, unsigned char len)
  fe:	c8 01       	movw	r24, r16
 100:	8c 1b       	sub	r24, r28
 102:	9d 0b       	sbc	r25, r29
{
	int i;

	for(i = 0; i < len; i++)
 104:	8e 15       	cp	r24, r14
 106:	9f 05       	cpc	r25, r15
 108:	9c f3       	brlt	.-26     	; 0xf0 <usart_send_string+0x16>
		{
			break;
		}
		usart_send_byte(*(str + i));
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	08 95       	ret

00000118 <usart_recv_byte>:

// usart 문자 수신
unsigned char usart_recv_byte(void)
{
	while(!(UCSR0A&(1<<RXC0)));
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <usart_recv_byte>
	return UDR0;
 11c:	8c b1       	in	r24, 0x0c	; 12
}
 11e:	08 95       	ret

00000120 <main>:
#include "06_usart.h"

int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
 128:	c4 54       	subi	r28, 0x44	; 68
 12a:	d1 09       	sbc	r29, r1
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
	int k = 0;
	unsigned char byte;
	
	unsigned char buf1[] = "1. LED동시 점등 TEST\r\n";
 136:	87 e1       	ldi	r24, 0x17	; 23
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	de 01       	movw	r26, r28
 13e:	58 96       	adiw	r26, 0x18	; 24
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x20>
	unsigned char buf2[] = "2. LED동시 점등 TEST\r\n";
 148:	87 e1       	ldi	r24, 0x17	; 23
 14a:	e7 e1       	ldi	r30, 0x17	; 23
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	d8 01       	movw	r26, r16
 156:	01 90       	ld	r0, Z+
 158:	0d 92       	st	X+, r0
 15a:	8a 95       	dec	r24
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x36>
	unsigned char buf3[] = "Input number(1-2) : ";
 15e:	85 e1       	ldi	r24, 0x15	; 21
 160:	ee e2       	ldi	r30, 0x2E	; 46
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	de 01       	movw	r26, r28
 166:	9f 96       	adiw	r26, 0x2f	; 47
 168:	01 90       	ld	r0, Z+
 16a:	0d 92       	st	X+, r0
 16c:	8a 95       	dec	r24
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x48>

	DDRA = 0xFF;  //LED출력포트
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
 174:	1b ba       	out	0x1b, r1	; 27
	
	usart_init();
 176:	0e 94 5f 00 	call	0xbe	; 0xbe <usart_init>
	
   	for(;;)
	{
		usart_send_string(buf1, sizeof(buf1));   
	   	usart_send_string(buf2, sizeof(buf2));
 17a:	e0 2e       	mov	r14, r16
 17c:	d1 2e       	mov	r13, r17
		else if(byte == '2')
		{
			PORTA = 0x00;
			for(k = 0; k < 8; k++)
			{
				PORTA = (1 << k);
 17e:	01 e0       	ldi	r16, 0x01	; 1
 180:	10 e0       	ldi	r17, 0x00	; 0
		
		usart_send_byte(byte); 
		
		if(byte == '1')
		{
			PORTA = 0xFF;
 182:	ff 24       	eor	r15, r15
 184:	fa 94       	dec	r15
	
	usart_init();
	
   	for(;;)
	{
		usart_send_string(buf1, sizeof(buf1));   
 186:	67 e1       	ldi	r22, 0x17	; 23
 188:	ce 01       	movw	r24, r28
 18a:	48 96       	adiw	r24, 0x18	; 24
 18c:	0e 94 6d 00 	call	0xda	; 0xda <usart_send_string>
	   	usart_send_string(buf2, sizeof(buf2));
 190:	67 e1       	ldi	r22, 0x17	; 23
 192:	8e 2d       	mov	r24, r14
 194:	9d 2d       	mov	r25, r13
 196:	0e 94 6d 00 	call	0xda	; 0xda <usart_send_string>
	    	usart_send_string(buf3, sizeof(buf3));
 19a:	65 e1       	ldi	r22, 0x15	; 21
 19c:	ce 01       	movw	r24, r28
 19e:	8f 96       	adiw	r24, 0x2f	; 47
 1a0:	0e 94 6d 00 	call	0xda	; 0xda <usart_send_string>
	
		byte = usart_recv_byte();   
 1a4:	0e 94 8c 00 	call	0x118	; 0x118 <usart_recv_byte>
 1a8:	28 2f       	mov	r18, r24
		
		usart_send_byte(byte); 
 1aa:	25 96       	adiw	r28, 0x05	; 5
 1ac:	2f af       	std	Y+63, r18	; 0x3f
 1ae:	25 97       	sbiw	r28, 0x05	; 5
 1b0:	0e 94 69 00 	call	0xd2	; 0xd2 <usart_send_byte>
		
		if(byte == '1')
 1b4:	25 96       	adiw	r28, 0x05	; 5
 1b6:	2f ad       	ldd	r18, Y+63	; 0x3f
 1b8:	25 97       	sbiw	r28, 0x05	; 5
 1ba:	21 33       	cpi	r18, 0x31	; 49
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <main+0xb4>
		{
			PORTA = 0xFF;
 1be:	fb ba       	out	0x1b, r15	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	2f e3       	ldi	r18, 0x3F	; 63
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xa6>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xb0>
 1d0:	00 00       	nop
 1d2:	17 c0       	rjmp	.+46     	; 0x202 <main+0xe2>
			_delay_ms(1000);
			PORTA = 0x00;
		}
		
		else if(byte == '2')
 1d4:	22 33       	cpi	r18, 0x32	; 50
 1d6:	b1 f4       	brne	.+44     	; 0x204 <main+0xe4>
		{
			PORTA = 0x00;
 1d8:	1b ba       	out	0x1b, r1	; 27
			for(k = 0; k < 8; k++)
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
			{
				PORTA = (1 << k);
 1de:	a8 01       	movw	r20, r16
 1e0:	02 2e       	mov	r0, r18
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <main+0xc6>
 1e4:	44 0f       	add	r20, r20
 1e6:	0a 94       	dec	r0
 1e8:	ea f7       	brpl	.-6      	; 0x1e4 <main+0xc4>
 1ea:	4b bb       	out	0x1b, r20	; 27
 1ec:	81 e1       	ldi	r24, 0x11	; 17
 1ee:	9a e7       	ldi	r25, 0x7A	; 122
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xd0>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xd6>
 1f6:	00 00       	nop
		}
		
		else if(byte == '2')
		{
			PORTA = 0x00;
			for(k = 0; k < 8; k++)
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	28 30       	cpi	r18, 0x08	; 8
 1fe:	31 05       	cpc	r19, r1
 200:	71 f7       	brne	.-36     	; 0x1de <main+0xbe>
			{
				PORTA = (1 << k);
				_delay_ms(125);
			}
			PORTA = 0x00;
 202:	1b ba       	out	0x1b, r1	; 27
		}

		usart_send_byte('\r');
 204:	8d e0       	ldi	r24, 0x0D	; 13
 206:	0e 94 69 00 	call	0xd2	; 0xd2 <usart_send_byte>
		usart_send_byte('\n');
 20a:	8a e0       	ldi	r24, 0x0A	; 10
 20c:	0e 94 69 00 	call	0xd2	; 0xd2 <usart_send_byte>
	}
 210:	ba cf       	rjmp	.-140    	; 0x186 <main+0x66>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
